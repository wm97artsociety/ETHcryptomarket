
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Universal Crypto Marketplace</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: Arial, sans-serif; background: #f4f4f4; }
    .top-bar {
      background: #222; color: white; padding: 10px 20px;
      display: flex; justify-content: space-between; align-items: center;
    }
    .wallet-controls {
      display: flex; flex-direction: column; gap: 10px; align-items: center;
    }
    .connect-btn {
      background: #0073e6; color: white; border: none;
      padding: 8px 12px; border-radius: 4px; cursor: pointer; width: 100%;
    }
    .connect-btn:hover { background: #005bb5; }
    .header-menu {
      background: #fff; padding: 10px 20px; border-bottom: 1px solid #ddd;
      display: flex; justify-content: space-between; align-items: center;
    }
    .categories button {
      margin-right: 10px; background: #eee; border: none;
      padding: 6px 12px; border-radius: 4px; cursor: pointer;
    }
    .search-bar { display: flex; gap: 10px; }
    .search-bar input {
      padding: 8px; font-size: 14px; width: 200px;
      border-radius: 4px; border: 1px solid #ccc;
    }
    .products {
      display: flex; flex-wrap: wrap; justify-content: space-around;
      gap: 20px; margin-top: 20px; padding: 0 20px;
    }
    .product-card {
      background: white; padding: 20px; width: 250px; text-align: center;
      border: 1px solid #ddd; border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .product-card img {
      max-width: 100%; height: auto; border-radius: 6px;
    }
    .product-card button {
      background: #0073e6; color: white; padding: 10px 15px;
      margin-top: 10px; cursor: pointer; border: none; border-radius: 5px;
    }
    .product-card button:hover { background: #005bb5; }
    footer {
      text-align: center; padding: 20px; background: #222;
      color: white; margin-top: 50px;
    }
    #adminBtn {
      background: #0073e6; color: white; padding: 8px 12px;
      border-radius: 4px; cursor: pointer; display: none;
    }
    #adminBtn:hover { background: #005bb5; }
    #contactBtn {
      background: #f39c12; color: white; padding: 8px 12px;
      border-radius: 4px; cursor: pointer; width: 100%;
    }
    #contactBtn:hover { background: #e67e22; }
  </style>
</head>
<body>

<div class="top-bar">
  <div>
    <h1>ðŸŒŽ Universal Crypto Marketplace</h1>
    <p>Buy items using ETH!</p>
  </div>
  <div class="wallet-controls">
    <span id="walletDisplay">Wallet: â€”</span>
    <button id="connectBtn" class="connect-btn">ðŸ”Œ Connect Wallet</button>
    <button id="adminBtn" onclick="window.location.href = 'admin.html';">Admin Panel</button>
    <button id="contactBtn" onclick="window.location.href = 'support.html';">Support & Contact</button>
  </div>
</div>

<div class="header-menu">
  <div class="categories">
    <button onclick="filterCategory('all')">All Items</button>
    <button onclick="filterCategory('clothing')">Clothing</button>
    <button onclick="filterCategory('accessories')">Accessories</button>
  </div>
  <div class="search-bar">
    <input type="text" id="searchInput" placeholder="Search for products..." onkeyup="searchProducts()">
  </div>
</div>

<div class="products" id="productList"></div>

<footer>
  &copy; 2025 Universal Crypto Marketplace. All Rights Reserved.
</footer>

<script>
let userAccount = null;
let provider;
let signer;
let ethToUsd = 0;

const ADMIN_WALLET = "0xREPLACEWALLETADMINWALLETNONEEDTOWORRYABOUTFRONTHOMEPAGEUSEWALLETLIKEAGPGTHATTELLSADMINOWNER";

async function fetchEthToUsd() {
  try {
    const res = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');
    const data = await res.json();
    ethToUsd = data.ethereum.usd;
    updateProductDisplay();
  } catch (err) {
    console.error('Failed to fetch ETH to USD:', err);
  }
}

async function connectWallet() {
  if (window.ethereum) {
    provider = new ethers.providers.Web3Provider(window.ethereum, "any");
    await provider.send("eth_requestAccounts", []);
    signer = provider.getSigner();
    const account = await signer.getAddress();
    updateWalletDisplay(account);
  } else {
    alert('Please install MetaMask or OKX Wallet!');
  }
}

async function updateWalletDisplay(account) {
  userAccount = account;
  signer = provider.getSigner();
  const short = userAccount.slice(0, 6) + "..." + userAccount.slice(-4);
  document.getElementById('walletDisplay').textContent = `Wallet: ${short}`;
  document.getElementById('connectBtn').textContent = 'âœ… Connected (Disconnect)';

  if (account.toLowerCase() === ADMIN_WALLET.toLowerCase()) {
    document.getElementById('adminBtn').style.display = 'inline-block';
  } else {
    document.getElementById('adminBtn').style.display = 'none';
  }
}

function disconnectWallet() {
  userAccount = null;
  signer = null;
  document.getElementById('walletDisplay').textContent = 'Wallet: â€”';
  document.getElementById('connectBtn').textContent = 'ðŸ”Œ Connect Wallet';
  document.getElementById('adminBtn').style.display = 'none';
  localStorage.removeItem('walletAddress');
}

document.getElementById('connectBtn').addEventListener('click', async () => {
  if (userAccount) {
    disconnectWallet();
  } else {
    await connectWallet();
  }
});

// Placeholder for product update
async function updateProductDisplay() {
  const products = JSON.parse(localStorage.getItem('products')) || [];
  const productList = document.getElementById('productList');
  productList.innerHTML = '';

  if (products.length === 0) {
    productList.innerHTML = '<p>No products available.</p>';
    return;
  }

  products.forEach((product, index) => {
    const usdValue = (product.ethPrice * ethToUsd).toFixed(2);
    const card = document.createElement('div');
    card.className = 'product-card';
    card.innerHTML = `
      <img src="${product.image}" alt="${product.name}" />
      <h3>${product.name}</h3>
      <p>${product.description}</p>
      <p class="price">${product.ethPrice} ETH (~$${usdValue})</p>
      <button onclick="window.location.href='product.html?id=${index}'">View Product</button>
    `;
    productList.appendChild(card);
  });
}

window.addEventListener('load', async () => {
  await fetchEthToUsd();
  const storedWallet = localStorage.getItem('walletAddress');
  if (storedWallet && window.ethereum) {
    provider = new ethers.providers.Web3Provider(window.ethereum, "any");
    signer = provider.getSigner();
    const account = await signer.getAddress();
    updateWalletDisplay(account);
  }
  updateProductDisplay();
});
</script>

</body>
</html>
